###################
# BUILD FOR LOCAL DEVELOPMENT
###################
FROM node:20.9.0-alpine as development

# NPM Token
ARG NPMTOKEN

# Create app directory
WORKDIR /app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
COPY package.json ./
COPY .npmrc .npmrc

# Install app dependencies
RUN npm run install:dev

# Bundle app source
COPY --chown=node:node . .

# Use the node user from the image (instead of the root user)
USER node


###################
# BUILD FOR PRODUCTION
###################

FROM node:20.9.0-alpine As build

# NPM Token
ARG NPMTOKEN

# Create app directory
WORKDIR /app

COPY --chown=node:node package*.json ./

# In order to run `npm run build` we need access to the Nest CLI which is a dev dependency. In the previous development stage we ran `npm ci` which installed all dependencies, so we can copy over the node_modules directory from the development image
COPY --chown=node:node --from=development /app/node_modules ./node_modules

# Bundle app source
COPY --chown=node:node . .

# Run the build command which creates the production bundle
RUN npm run  build:library
RUN npm run build:deviceprotocols

# Set NODE_ENV environment variable
ENV NODE_ENV production

# Install app dependencies and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
RUN npm run install:prod

USER node

###################
# PRODUCTION
###################

FROM node:20.9.0-alpine As production

# Set NODE_ENV environment variable
ENV NODE_ENV production

# Create app directory
WORKDIR /opt/app

# Copy the bundled code from the build stage to the production image
COPY --chown=node:node --from=build /app/node_modules ./node_modules
COPY --chown=node:node --from=build /app/dist/libs ./dist/libs
COPY --chown=node:node --from=build /app/dist/apps/av-ds-deviceprotocols ./dist/apps/av-ds-deviceprotocols

# Start the server using the production build
CMD [ "node", "dist/apps/av-ds-deviceprotocols/main.js" ]